#!/usr/bin/env python3
"""
Composite 3D Thermal Visualization Example

Implementation of complete composite 3D visualization workflow
Source: Sprint 3 - 3D Visualization & Advanced Features, Task 3.3.2
User Story: As a thermal engineer, I need to visualize multiple heat transfer modes simultaneously in 3D

This example demonstrates:
- Composite visualization combining temperature, conductive, and convective heat
- Layer blending with customizable weights
- Advanced 3D rendering with multiple heat transfer indicators
- Interactive exploration of complex thermal scenarios
"""

import sys
import os
from pathlib import Path
import numpy as np
import warnings

# Add parent directories to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))
sys.path.insert(0, str(Path(__file__).parent.parent))

# Check for VTK availability
try:
    import vtk
    VTK_AVAILABLE = True
except ImportError:
    VTK_AVAILABLE = False
    print("‚ö†Ô∏è  VTK not available. 3D visualization will not work.")
    print("   Install with: pip install vtk")

import jos3
from jos3_viz.core import JOS3DataParser, ExternalHeatCalculator, setup_logger

if VTK_AVAILABLE:
    from jos3_viz.models.mannequin import MannequinGenerator
    from jos3_viz.visualization.renderer_3d import HeatRenderer3D


def run_complex_thermal_simulation():
    """Run JOS3 simulation with multiple heat transfer modes for composite visualization"""
    
    print("üß™ Running Complex Multi-Modal Thermal Simulation")
    print("-" * 60)
    
    # Create JOS3 model for extreme thermal stress
    model = jos3.JOS3(
        height=1.75,  # Average height (175 cm)
        weight=70,    # 70 kg
        age=35,       # Middle-aged adult
        ex_output="all"
    )
    
    print("‚úì Created JOS3 model (35-year-old, 70kg, 175cm)")
    
    # Set complex environmental conditions
    model.Ta = 42      # Extreme heat (42¬∞C)
    model.RH = 85      # Very high humidity (85%)
    model.Va = 0.3     # Moderate air movement
    model.PAR = 2.5    # High physical activity level
    
    print("‚úì Set extreme environmental conditions (42¬∞C, 85% RH, high activity)")
    
    # Apply comprehensive multi-modal cooling/heating system
    # Cooling vest + heating pads + arm cooling
    model.material_temp = [float('nan')] * 17
    
    # Cooling devices
    model.material_temp[2] = 12    # Chest intensive cooling at 12¬∞C
    model.material_temp[3] = 12    # Back intensive cooling at 12¬∞C
    model.material_temp[6] = 16    # Left arm moderate cooling at 16¬∞C
    model.material_temp[9] = 16    # Right arm moderate cooling at 16¬∞C
    
    # Heating devices (therapeutic warming)
    model.material_temp[11] = 45   # Left thigh warming at 45¬∞C
    model.material_temp[14] = 45   # Right thigh warming at 45¬∞C
    model.material_temp[12] = 40   # Left leg mild heating at 40¬∞C
    model.material_temp[15] = 40   # Right leg mild heating at 40¬∞C
    
    # Contact areas with varying coverage
    model.contact_area = [0] * 17
    model.contact_area[2] = 0.90    # 90% chest coverage (intensive cooling)
    model.contact_area[3] = 0.90    # 90% back coverage (intensive cooling)
    model.contact_area[6] = 0.75    # 75% left arm coverage
    model.contact_area[9] = 0.75    # 75% right arm coverage
    model.contact_area[11] = 0.65   # 65% left thigh coverage (heating)
    model.contact_area[14] = 0.65   # 65% right thigh coverage (heating)
    model.contact_area[12] = 0.50   # 50% left leg coverage
    model.contact_area[15] = 0.50   # 50% right leg coverage
    
    model.contact_resistance = 0.006  # Excellent thermal contact
    
    print("‚úì Applied complex multi-modal thermal system:")
    print("   ‚Ä¢ Intensive torso cooling (12¬∞C, 90% coverage)")
    print("   ‚Ä¢ Moderate arm cooling (16¬∞C, 75% coverage)")
    print("   ‚Ä¢ Therapeutic leg heating (40-45¬∞C, 50-65% coverage)")
    
    # Run extended simulation for thermal equilibrium
    print("‚è≥ Running 45-minute thermal simulation...")
    model.simulate(times=45)
    
    # Convert results to DataFrame
    import pandas as pd
    results_dict = model.dict_results()
    results_df = pd.DataFrame(results_dict)
    
    print(f"‚úÖ Simulation complete! Generated {results_df.shape[0]} time points")
    
    return results_df, model


def demonstrate_composite_3d_visualization(results_df):
    """Demonstrate composite 3D visualization combining multiple heat transfer modes"""
    
    print("\nüé® Composite 3D Thermal Visualization")
    print("-" * 60)
    
    if not VTK_AVAILABLE:
        print("‚ùå VTK not available - skipping composite 3D visualization")
        return None
    
    # Parse JOS3 data
    parser = JOS3DataParser(results_df)
    heat_calc = ExternalHeatCalculator(parser)
    
    # Initialize 3D renderer with high-quality settings
    renderer_3d = HeatRenderer3D(
        window_size=(1200, 900),
        background_color=(0.02, 0.02, 0.05)  # Very dark blue background
    )
    
    # Setup VTK pipeline with custom anthropometry
    anthropometry = {'height': 1.75, 'weight': 70.0, 'age': 35}
    renderer_3d.setup_vtk_pipeline(anthropometry)
    print("‚úì Initialized high-quality 3D VTK rendering pipeline")
    
    # Configure presentation-quality lighting
    renderer_3d.configure_lighting_and_camera('presentation', 'isometric')
    print("‚úì Applied presentation lighting and isometric view")
    
    final_time = -1  # Last time point for steady-state analysis
    
    # Gather data for composite visualization
    print("\nüìä Gathering multi-modal thermal data...")
    
    # 1. Temperature data (base layer)
    skin_temps = parser.get_temperature_data(final_time, 'skin')
    core_temps = parser.get_temperature_data(final_time, 'core')
    
    # 2. Conductive heat transfer data (overlay layer)
    conductive_heat = parser.get_heat_transfer_data(final_time, 'external_conduction')
    
    # 3. Convective heat transfer data (effect layer)
    convective_heat = {}
    for segment in skin_temps.keys():
        # Simulate convective effects based on air movement and temperature difference
        air_temp = 42  # Environmental temperature
        skin_temp = skin_temps[segment]
        temp_diff = skin_temp - air_temp
        # Convective heat transfer coefficient varies by body part
        h_conv = 15.0 if 'Arm' in segment or 'Leg' in segment else 10.0
        area_factor = 0.1  # Simplified area factor
        convective_heat[segment] = h_conv * area_factor * temp_diff
    
    print(f"   ‚Ä¢ Temperature data: {len(skin_temps)} segments")
    print(f"   ‚Ä¢ Conductive data: {len([v for v in conductive_heat.values() if abs(v) > 0.1])} active segments")
    print(f"   ‚Ä¢ Convective data: {len(convective_heat)} segments")
    
    # Demonstration 1: Standard composite visualization
    print("\nüéØ Creating standard composite visualization...")
    renderer_3d.render_composite_visualization(
        temperature_data=skin_temps,
        conductive_data=conductive_heat,
        convective_data=convective_heat
    )
    
    output_dir = Path("composite_3d_outputs")
    output_dir.mkdir(exist_ok=True)
    
    screenshot_path = output_dir / "composite_standard.png"
    renderer_3d.save_screenshot(str(screenshot_path), magnification=2)
    print(f"   ‚úì Standard composite: {screenshot_path}")
    
    # Demonstration 2: Temperature-dominant composite
    print("\nüå°Ô∏è Creating temperature-dominant composite...")
    temp_weights = {
        'temperature': 0.8,
        'conductive': 0.15,
        'convective': 0.05
    }
    
    renderer_3d.render_composite_visualization(
        temperature_data=skin_temps,
        conductive_data=conductive_heat,
        convective_data=convective_heat,
        layer_weights=temp_weights
    )
    
    screenshot_path = output_dir / "composite_temp_dominant.png"
    renderer_3d.save_screenshot(str(screenshot_path), magnification=2)
    print(f"   ‚úì Temperature-dominant: {screenshot_path}")
    
    # Demonstration 3: Conductive-focused composite
    print("\n‚ùÑÔ∏è Creating conductive-focused composite...")
    cond_weights = {
        'temperature': 0.3,
        'conductive': 0.6,
        'convective': 0.1
    }
    
    renderer_3d.render_composite_visualization(
        temperature_data=skin_temps,
        conductive_data=conductive_heat,
        convective_data=convective_heat,
        layer_weights=cond_weights
    )
    
    screenshot_path = output_dir / "composite_cond_focused.png"
    renderer_3d.save_screenshot(str(screenshot_path), magnification=2)
    print(f"   ‚úì Conductive-focused: {screenshot_path}")
    
    # Demonstration 4: Multiple camera angles of composite view
    print("\nüì∑ Capturing composite visualization from multiple angles...")
    camera_views = ['front', 'back', 'left', 'right', 'top', 'isometric']
    
    for view in camera_views:
        renderer_3d.configure_lighting_and_camera('presentation', view)
        screenshot_path = output_dir / f"composite_{view}_view.png"
        renderer_3d.save_screenshot(str(screenshot_path))
        print(f"   ‚úì {view.title()} angle: {screenshot_path.name}")
    
    # Demonstration 5: Time series of composite visualization
    print("\nüé¨ Creating composite time series...")
    time_indices = [0, 10, 20, 30, 40, 44]  # Key time points
    
    composite_frames = []
    for i, time_idx in enumerate(time_indices):
        # Get data for this time point
        temps = parser.get_temperature_data(time_idx, 'skin')
        conds = parser.get_heat_transfer_data(time_idx, 'external_conduction')
        
        # Render composite
        renderer_3d.render_composite_visualization(
            temperature_data=temps,
            conductive_data=conds,
            convective_data=convective_heat  # Keep convective constant for this demo
        )
        
        frame_path = output_dir / f"composite_timeseries_{i:02d}_{time_idx:02d}min.png"
        renderer_3d.save_screenshot(str(frame_path))
        composite_frames.append(frame_path)
        print(f"   ‚úì Frame {i+1}/6 ({time_idx} min): {frame_path.name}")
    
    print(f"   üí° Animation command: ffmpeg -r 1 -i composite_timeseries_%02d_*.png composite_animation.mp4")
    
    return renderer_3d, output_dir


def analyze_composite_thermal_data(results_df):
    """Analyze thermal data in the context of composite visualization"""
    
    print("\nüìà Composite Thermal Analysis")
    print("-" * 60)
    
    parser = JOS3DataParser(results_df)
    heat_calc = ExternalHeatCalculator(parser)
    
    final_time = -1
    
    # Multi-modal heat transfer analysis
    skin_temps = parser.get_temperature_data(final_time, 'skin')
    conductive_heat = parser.get_heat_transfer_data(final_time, 'external_conduction')
    
    print("üå°Ô∏è Temperature Distribution Analysis:")
    temp_values = list(skin_temps.values())
    print(f"   Mean skin temperature: {np.mean(temp_values):.2f}¬∞C")
    print(f"   Temperature range: {np.min(temp_values):.2f} - {np.max(temp_values):.2f}¬∞C")
    print(f"   Temperature std dev: {np.std(temp_values):.2f}¬∞C")
    
    # Identify thermal zones
    cooling_segments = [seg for seg, temp in skin_temps.items() 
                       if seg in conductive_heat and conductive_heat[seg] < -5]
    heating_segments = [seg for seg, temp in skin_temps.items() 
                       if seg in conductive_heat and conductive_heat[seg] > 5]
    neutral_segments = [seg for seg in skin_temps.keys() 
                       if seg not in cooling_segments and seg not in heating_segments]
    
    print(f"\n‚ùÑÔ∏è Cooling Zone Analysis:")
    if cooling_segments:
        cooling_temps = [skin_temps[seg] for seg in cooling_segments]
        cooling_heat = [conductive_heat[seg] for seg in cooling_segments]
        print(f"   Active cooling segments: {len(cooling_segments)}")
        print(f"   Cooling zone segments: {cooling_segments}")
        print(f"   Mean cooling temp: {np.mean(cooling_temps):.2f}¬∞C")
        print(f"   Total cooling power: {sum(cooling_heat):.1f}W")
    
    print(f"\nüî• Heating Zone Analysis:")
    if heating_segments:
        heating_temps = [skin_temps[seg] for seg in heating_segments]
        heating_heat = [conductive_heat[seg] for seg in heating_segments]
        print(f"   Active heating segments: {len(heating_segments)}")
        print(f"   Heating zone segments: {heating_segments}")
        print(f"   Mean heating temp: {np.mean(heating_temps):.2f}¬∞C")
        print(f"   Total heating power: {sum(heating_heat):.1f}W")
    
    print(f"\n‚öñÔ∏è Neutral Zone Analysis:")
    if neutral_segments:
        neutral_temps = [skin_temps[seg] for seg in neutral_segments]
        print(f"   Neutral segments: {len(neutral_segments)}")
        print(f"   Mean neutral temp: {np.mean(neutral_temps):.2f}¬∞C")
    
    # Composite visualization effectiveness
    print(f"\nüé® Composite Visualization Metrics:")
    total_segments = len(skin_temps)
    active_segments = len(cooling_segments) + len(heating_segments)
    activity_ratio = active_segments / total_segments
    
    print(f"   Total body segments: {total_segments}")
    print(f"   Active thermal segments: {active_segments}")
    print(f"   Thermal activity ratio: {activity_ratio:.1%}")
    
    # Temperature gradient analysis
    temp_range = np.max(temp_values) - np.min(temp_values)
    print(f"   Temperature gradient: {temp_range:.2f}¬∞C span")
    
    if temp_range > 8:
        print("   üî• HIGH thermal gradient - excellent for composite visualization")
    elif temp_range > 4:
        print("   ‚ö° MODERATE thermal gradient - good composite contrast")
    else:
        print("   ‚ùÑÔ∏è LOW thermal gradient - consider enhancing thermal devices")
    
    # Energy balance validation
    energy_balance = heat_calc.validate_energy_balance(final_time)
    print(f"\n‚öñÔ∏è Multi-Modal Energy Balance:")
    print(f"   Status: {energy_balance['message']}")
    print(f"   Total conductive: {sum(conductive_heat.values()):.1f}W")
    
    return {
        'cooling_segments': cooling_segments,
        'heating_segments': heating_segments,
        'neutral_segments': neutral_segments,
        'temperature_gradient': temp_range,
        'activity_ratio': activity_ratio
    }


def main():
    """Main composite 3D thermal visualization demonstration"""
    
    print("üéØ JOS3 COMPOSITE 3D THERMAL VISUALIZATION DEMONSTRATION")
    print("=" * 80)
    print("Sprint 3: Task 3.3.2 - Composite 3D Visualization System")
    print()
    
    # Setup logging
    logger = setup_logger("composite_3d_viz", console_output=False)
    
    try:
        # Step 1: Run complex multi-modal thermal simulation
        results_df, model = run_complex_thermal_simulation()
        
        # Step 2: Demonstrate composite 3D visualization
        renderer_3d, output_dir = demonstrate_composite_3d_visualization(results_df)
        
        # Step 3: Analyze composite thermal data
        thermal_analysis = analyze_composite_thermal_data(results_df)
        
        # Summary
        print("\n" + "=" * 80)
        print("‚úÖ COMPOSITE 3D THERMAL VISUALIZATION DEMONSTRATION COMPLETE")
        print("=" * 80)
        
        print("\nüéØ Sprint 3 Task 3.3.2 Achievements Demonstrated:")
        print("  1. ‚úÖ Multi-modal heat transfer data integration")
        print("  2. ‚úÖ Composite visualization with layer blending")
        print("  3. ‚úÖ Customizable visualization weights")
        print("  4. ‚úÖ Advanced contact indicators")
        print("  5. ‚úÖ Multiple visualization perspectives")
        print("  6. ‚úÖ Time-series composite animation")
        print("  7. ‚úÖ Thermal zone analysis and validation")
        
        if VTK_AVAILABLE and output_dir:
            print("\nüìÅ Generated Composite 3D Files:")
            files = list(output_dir.glob("*.png"))
            print(f"  ‚Ä¢ {len(files)} high-quality composite renderings in {output_dir}/")
            
            # Show key files
            key_files = ['composite_standard.png', 'composite_temp_dominant.png', 
                        'composite_cond_focused.png']
            for file in key_files:
                if (output_dir / file).exists():
                    print(f"    - {file}")
            
            timeseries_files = list(output_dir.glob("composite_timeseries_*.png"))
            if timeseries_files:
                print(f"    - {len(timeseries_files)} animation frames")
        
        print("\nüî¨ Thermal Analysis Summary:")
        if thermal_analysis:
            print(f"  ‚Ä¢ {len(thermal_analysis['cooling_segments'])} cooling zones")
            print(f"  ‚Ä¢ {len(thermal_analysis['heating_segments'])} heating zones")
            print(f"  ‚Ä¢ {thermal_analysis['temperature_gradient']:.1f}¬∞C temperature gradient")
            print(f"  ‚Ä¢ {thermal_analysis['activity_ratio']:.0%} thermal activity coverage")
        
        print("\nüöÄ System Status: COMPOSITE 3D VISUALIZATION READY FOR PRODUCTION")
        
        return {
            'results_df': results_df,
            '3d_renderer': renderer_3d,
            'output_directory': output_dir,
            'thermal_analysis': thermal_analysis,
            'vtk_available': VTK_AVAILABLE
        }
        
    except Exception as e:
        print(f"\n‚ùå COMPOSITE 3D DEMONSTRATION FAILED: {str(e)}")
        import traceback
        traceback.print_exc()
        return None


if __name__ == "__main__":
    demo_results = main()
    
    if demo_results and demo_results['vtk_available']:
        print("\nüéâ Composite 3D thermal visualization system is fully operational!")
        print("üí° Next steps: Experiment with different layer weights and thermal scenarios")
    elif not VTK_AVAILABLE:
        print("\nüì¶ To enable 3D visualization, install VTK:")  
        print("   pip install vtk")
    
    input("\nPress Enter to exit...")  # Keep window open